// Code generated by "stringer -type=Direction,Subject,itemType"; DO NOT EDIT.

package policy

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Incoming-0]
	_ = x[Outgoing-1]
}

const _Direction_name = "IncomingOutgoing"

var _Direction_index = [...]uint8{0, 8, 16}

func (i Direction) String() string {
	if i < 0 || i >= Direction(len(_Direction_index)-1) {
		return "Direction(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Direction_name[_Direction_index[i]:_Direction_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Any-0]
	_ = x[Call-1]
	_ = x[Signal-2]
	_ = x[Return-3]
	_ = x[Error-4]
}

const _Subject_name = "AnyCallSignalReturnError"

var _Subject_index = [...]uint8{0, 3, 7, 13, 19, 24}

func (i Subject) String() string {
	if i < 0 || i >= Subject(len(_Subject_index)-1) {
		return "Subject(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Subject_name[_Subject_index[i]:_Subject_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[itemError-0]
	_ = x[itemRule-1]
	_ = x[itemDirSub-2]
	_ = x[itemAll-3]
	_ = x[itemDest-4]
	_ = x[itemInter-5]
	_ = x[itemMember-6]
	_ = x[itemDomUUID-7]
	_ = x[itemDomID-8]
	_ = x[itemDomType-9]
	_ = x[itemSender-10]
	_ = x[itemStubdom-11]
	_ = x[itemIfBoolTrue-12]
	_ = x[itemIfBoolFalse-13]
	_ = x[itemEOL-14]
}

const _itemType_name = "itemErroritemRuleitemDirSubitemAllitemDestitemInteritemMemberitemDomUUIDitemDomIDitemDomTypeitemSenderitemStubdomitemIfBoolTrueitemIfBoolFalseitemEOL"

var _itemType_index = [...]uint8{0, 9, 17, 27, 34, 42, 51, 61, 72, 81, 92, 102, 113, 127, 142, 149}

func (i itemType) String() string {
	if i < 0 || i >= itemType(len(_itemType_index)-1) {
		return "itemType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _itemType_name[_itemType_index[i]:_itemType_index[i+1]]
}
